class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int,int> count; 
        int div = nums.size()/2;
        for ( int i:nums){
            count[i]++; 
            if(count[i]>div){
                return i;
            }
        }
        return -1;
    }
};
------------------------------------------------------------
Explaination - 
  store the value of count in an unordered hash map 
------------------------------------------------------------
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        return nums[n/2];
    }
};
-------------------------------------------------------------
since the number of times an element must come in an array is
more than n/2, then after sorting the array the n/2 th index 
element is that number.
-------------------------------------------------------------
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int ck ; // candidate key
        int count = 0;
        for(int i:nums){
            if(count==0){
                ck = i;
            }
            if(ck==i){
                count++;
            }
            else{
                count--;
            }

        }
        return ck;
    }
};
------------------------------------------------------------
Moore voting algorithm ( check notes )
------------------------------------------------------------
link - https://leetcode.com/problems/majority-element/description/
topic - hashmaps
difficulty - easy

