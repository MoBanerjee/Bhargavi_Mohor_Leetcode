class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        sorted_nums = sorted(nums) # this will sort the array 
        left = 0
        right = len(sorted_nums)-1
        found = False
        while found==False:
            s = sorted_nums[left]+sorted_nums[right]
            if s ==target:
                found = True
            elif s<target:
                left = left+1
            else:
                right = right-1
        if sorted_nums[right]==sorted_nums[left]:
            return [nums.index(sorted_nums[right]),nums.index(sorted_nums[left], nums.index(sorted_nums[right])+1)]
        else:
            return [nums.index(sorted_nums[right]),nums.index(sorted_nums[left])]


Explaination - 
This consumes much less time that checking every possible pair which would be about O(n^2) time complexity 
But in this case ( which ofcourse might not be the most optimal solution but is still better than the brute force approach ) 
sorting takes only O(Nlogn) --> according to the sortign function that is inbuilt in the python library
finding index would take O(n) --> manually searches 
This approach is defintely less time consuming that brute force, with time complexity being O(nlogn)


Question Info:
link --> https://leetcode.com/problems/two-sum/
difficulty --> medium 
topic --> arrays
name --> two sum
