actual solution

#include <algorithm>
using namespace std;
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int reachable = 0 ;
        for (int i=0;i<nums.size();i++){
            if(i>reachable){
                return false;
            }
            reachable = max(reachable, i+nums[i]);
        }
        return true;
    }
};


my dumb brain did using dynamic programming 
class Solution {
vector<bool> sol;
public:
    bool canJump(vector<int>& nums) {
        sol = vector<bool>(nums.size(),false);
        for (int i=nums.size()-1;i>=0;i--){
            sol[i] = canJump(nums,i);
        }
        return sol[0];
    }
private:
    bool canJump(vector<int>&nums,int pos){
        if(pos == nums.size()-1){
            return true;
        }
        if(nums[pos]==0 && pos!=nums.size()-1){
            return false;
        }
        for (int i=1;i<=nums[pos];i++){
            if(sol[pos+i]){
                return true;
            }
        }
        return false;
    }
};
-------------------------------------------------------------------
link - https://leetcode.com/problems/jump-game/
difficulty - medium 
topic - dynamic programming
