space optimized version
class Solution {
    public int rob(int[] nums) {
        int n=nums.length;
        if(n==1) return nums[0];
        int prev2=nums[0];
        int prev=Math.max(nums[0],nums[1]);
        int curr=prev;
        if(n==2)return curr;
        for(int i=2;i<n-1;i++){
        curr=Math.max(prev2+nums[i],prev);
        prev2=prev;
        prev=curr;
    }
    
    int prev22=nums[1];
        int prev12=Math.max(nums[1],nums[2]);
        int curr2=prev12;
        for(int i=3;i<n;i++){
        curr2=Math.max(prev22+nums[i],prev12);
        prev22=prev12;
        prev12=curr2;
    }
    return Math.max(curr,curr2);
}}

Tabulation
class Solution {
    public int rob(int[] nums) {
        int n=nums.length;
        if(n==1) return nums[0];
        if(n==2) return Math.max(nums[0],nums[1]);
        int[] dp=new int[n-1];
        dp[0]=nums[0];
        dp[1]=Math.max(nums[0],nums[1]);
        for(int i=2;i<n-1;i++){
        dp[i]=Math.max(dp[i-2]+nums[i],dp[i-1]);
    }
    int first= dp[n-2];

    dp[0]=nums[1];
        dp[1]=Math.max(nums[1],nums[2]);
        for(int i=3;i<n;i++){
        dp[i-1]=Math.max(dp[i-3]+nums[i],dp[i-2]);
    }
    int sec= dp[n-2];
    return Math.max(first,sec);


}}
