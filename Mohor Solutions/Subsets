Bit manipulation
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        int n=nums.length;
        List<List<Integer>> res = new ArrayList<>();
        for(int i=0;i<(1<<n);i++){
            List<Integer> newlist=new ArrayList<Integer>();
            for(int j=0;j<n;j++){
                if((i&(1<<j))!=0)newlist.add(nums[j]);
            }
            res.add(newlist);
        }
        return res;
    }
}

Backtracking
class Solution {
public List<List<Integer>> subsets(int[] nums) {
    List<Integer> templist=new ArrayList<>();
    List<List<Integer>> list=new ArrayList<>();
    backtrack(list,templist,nums,0);
    return list;
}
void backtrack(List<List<Integer>> list, List<Integer> temp,int[] nums, int st){
    list.add(new ArrayList<>(temp));
    for(int i=st;i<nums.length;i++){
        temp.add(nums[i]);
        backtrack(list, temp,nums,i+1);
        temp.remove(temp.size()-1);
    }
}
}
